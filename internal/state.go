package internal

import "time"

type ProjectState int

const (
	// ProjectSeen marks that a projects configuration has been seen on disk but has not yet started processing
	ProjectSeen ProjectState = iota
	// ProjectApplying marks that the configuration has been loaded and is currently in the process of being applied
	// by docker compose
	ProjectApplying
	// ProjectFailed marks that during the process of loading, processing and applying the project configuration, a
	// failure occurred and the project was not completely created
	ProjectFailed
	// ProjectOk means that the config was loaded, processed and applied successfully and should have been launched
	// This only relates to the application of the config, however, and does not indicate anything about the running
	// status of the project (ie container failure)
	ProjectOk
	// ProjectMissing means that the config was once present and processed, however it has since been removed from the
	// filesystem. No attempt will be made to keep applying this configuration, this is used mostly for the CLI to
	// indicate that something may be wrong
	ProjectMissing
)

// DaemonCommand represents a command that can be sent to the daemon from the CLI to force some action
type DaemonCommand int

const (
	// CommandApply indicates that the daemon should immediately try load then apply all configurations
	CommandApply DaemonCommand = iota
)

// ActiveProjectState contains the state for a single project representing the current state, the docker file it
// is generated by, and when it was last processed by the daemon
type ActiveProjectState struct {
	// This is the representation of the actual project as loaded from disk on the last run
	Project ProcessedDockerComposeFile
	// State is the last seen state of the project while being applied
	State ProjectState
	// LastUpdated represents the last time the daemon processed this entry
	LastUpdated time.Time
}

// StateRecord contains a mapping of all project names to their most recently observed state
type StateRecord struct {
	Projects map[string]*ActiveProjectState
}

// Update will update the given project to the provided state, handling if this is the first time the project has been
// seen (in which case it will be inserted), and also automatically setting the LastUpdated time on the state
func (s *StateRecord) Update(project ProcessedDockerComposeFile, state ProjectState) {
	if _, ok := s.Projects[project.Name]; !ok {
		s.Projects[project.Name] = &ActiveProjectState{
			Project:     project,
			State:       state,
			LastUpdated: time.Now(),
		}
	} else {
		s.Projects[project.Name].State = state
		s.Projects[project.Name].LastUpdated = time.Now()
	}
}

// UpdateByName performs the same function as Update but in the absence of a whole configuration. In this case, if the
// record does not exist, no updates will be performed as there is no config with which to create and entry. This should
// only be used in cases where there is genuinely no configuration to use such as if a project has gone missing
// (ProjectMissing)
func (s *StateRecord) UpdateByName(name string, state ProjectState) {
	if _, ok := s.Projects[name]; ok {
		s.Projects[name].State = state
		s.Projects[name].LastUpdated = time.Now()
	}
}
